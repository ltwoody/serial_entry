
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SerialJob
 * 
 */
export type SerialJob = $Result.DefaultSelection<Prisma.$SerialJobPayload>
/**
 * Model ProductMaster
 * 
 */
export type ProductMaster = $Result.DefaultSelection<Prisma.$ProductMasterPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serialJob`: Exposes CRUD operations for the **SerialJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SerialJobs
    * const serialJobs = await prisma.serialJob.findMany()
    * ```
    */
  get serialJob(): Prisma.SerialJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productMaster`: Exposes CRUD operations for the **ProductMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductMasters
    * const productMasters = await prisma.productMaster.findMany()
    * ```
    */
  get productMaster(): Prisma.ProductMasterDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SerialJob: 'SerialJob',
    ProductMaster: 'ProductMaster'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "serialJob" | "productMaster"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SerialJob: {
        payload: Prisma.$SerialJobPayload<ExtArgs>
        fields: Prisma.SerialJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SerialJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SerialJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          findFirst: {
            args: Prisma.SerialJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SerialJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          findMany: {
            args: Prisma.SerialJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>[]
          }
          create: {
            args: Prisma.SerialJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          createMany: {
            args: Prisma.SerialJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SerialJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>[]
          }
          delete: {
            args: Prisma.SerialJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          update: {
            args: Prisma.SerialJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          deleteMany: {
            args: Prisma.SerialJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SerialJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SerialJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>[]
          }
          upsert: {
            args: Prisma.SerialJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerialJobPayload>
          }
          aggregate: {
            args: Prisma.SerialJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSerialJob>
          }
          groupBy: {
            args: Prisma.SerialJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<SerialJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.SerialJobCountArgs<ExtArgs>
            result: $Utils.Optional<SerialJobCountAggregateOutputType> | number
          }
        }
      }
      ProductMaster: {
        payload: Prisma.$ProductMasterPayload<ExtArgs>
        fields: Prisma.ProductMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          findFirst: {
            args: Prisma.ProductMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          findMany: {
            args: Prisma.ProductMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>[]
          }
          create: {
            args: Prisma.ProductMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          createMany: {
            args: Prisma.ProductMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductMasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>[]
          }
          delete: {
            args: Prisma.ProductMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          update: {
            args: Prisma.ProductMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          deleteMany: {
            args: Prisma.ProductMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductMasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>[]
          }
          upsert: {
            args: Prisma.ProductMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductMasterPayload>
          }
          aggregate: {
            args: Prisma.ProductMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductMaster>
          }
          groupBy: {
            args: Prisma.ProductMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductMasterCountArgs<ExtArgs>
            result: $Utils.Optional<ProductMasterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    serialJob?: SerialJobOmit
    productMaster?: ProductMasterOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    serialJobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serialJobs?: boolean | UserCountOutputTypeCountSerialJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSerialJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerialJobWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    u_id: number | null
  }

  export type UserSumAggregateOutputType = {
    u_id: number | null
  }

  export type UserMinAggregateOutputType = {
    u_id: number | null
    username: string | null
    password: string | null
    email: string | null
    firstname: string | null
    lastname: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    u_id: number | null
    username: string | null
    password: string | null
    email: string | null
    firstname: string | null
    lastname: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    u_id: number
    username: number
    password: number
    email: number
    firstname: number
    lastname: number
    createdAt: number
    updatedAt: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    u_id?: true
  }

  export type UserSumAggregateInputType = {
    u_id?: true
  }

  export type UserMinAggregateInputType = {
    u_id?: true
    username?: true
    password?: true
    email?: true
    firstname?: true
    lastname?: true
    createdAt?: true
    updatedAt?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    u_id?: true
    username?: true
    password?: true
    email?: true
    firstname?: true
    lastname?: true
    createdAt?: true
    updatedAt?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    u_id?: true
    username?: true
    password?: true
    email?: true
    firstname?: true
    lastname?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    u_id: number
    username: string
    password: string
    email: string
    firstname: string | null
    lastname: string | null
    createdAt: Date
    updatedAt: Date
    role: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    serialJobs?: boolean | User$serialJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    u_id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    firstname?: boolean
    lastname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"u_id" | "username" | "password" | "email" | "firstname" | "lastname" | "createdAt" | "updatedAt" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serialJobs?: boolean | User$serialJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      serialJobs: Prisma.$SerialJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      u_id: number
      username: string
      password: string
      email: string
      firstname: string | null
      lastname: string | null
      createdAt: Date
      updatedAt: Date
      role: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `u_id`
     * const userWithU_idOnly = await prisma.user.findMany({ select: { u_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `u_id`
     * const userWithU_idOnly = await prisma.user.createManyAndReturn({
     *   select: { u_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `u_id`
     * const userWithU_idOnly = await prisma.user.updateManyAndReturn({
     *   select: { u_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serialJobs<T extends User$serialJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$serialJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly u_id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.serialJobs
   */
  export type User$serialJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    where?: SerialJobWhereInput
    orderBy?: SerialJobOrderByWithRelationInput | SerialJobOrderByWithRelationInput[]
    cursor?: SerialJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SerialJobScalarFieldEnum | SerialJobScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SerialJob
   */

  export type AggregateSerialJob = {
    _count: SerialJobCountAggregateOutputType | null
    _avg: SerialJobAvgAggregateOutputType | null
    _sum: SerialJobSumAggregateOutputType | null
    _min: SerialJobMinAggregateOutputType | null
    _max: SerialJobMaxAggregateOutputType | null
  }

  export type SerialJobAvgAggregateOutputType = {
    u_id: number | null
    count_round: number | null
  }

  export type SerialJobSumAggregateOutputType = {
    u_id: number | null
    count_round: number | null
  }

  export type SerialJobMinAggregateOutputType = {
    u_id: number | null
    serial_number: string | null
    replace_serial: string | null
    received_date: Date | null
    supplier: string | null
    date_receipt: Date | null
    brand_name: string | null
    product_code: string | null
    product_name: string | null
    job_no: string | null
    condition: string | null
    remark: string | null
    count_round: number | null
    create_by: string | null
    create_time: Date | null
    update_by: string | null
    update_time: Date | null
    replace_code: string | null
    replace_product: string | null
    rowuid: string | null
  }

  export type SerialJobMaxAggregateOutputType = {
    u_id: number | null
    serial_number: string | null
    replace_serial: string | null
    received_date: Date | null
    supplier: string | null
    date_receipt: Date | null
    brand_name: string | null
    product_code: string | null
    product_name: string | null
    job_no: string | null
    condition: string | null
    remark: string | null
    count_round: number | null
    create_by: string | null
    create_time: Date | null
    update_by: string | null
    update_time: Date | null
    replace_code: string | null
    replace_product: string | null
    rowuid: string | null
  }

  export type SerialJobCountAggregateOutputType = {
    u_id: number
    serial_number: number
    replace_serial: number
    received_date: number
    supplier: number
    date_receipt: number
    brand_name: number
    product_code: number
    product_name: number
    job_no: number
    condition: number
    remark: number
    count_round: number
    create_by: number
    create_time: number
    update_by: number
    update_time: number
    replace_code: number
    replace_product: number
    rowuid: number
    _all: number
  }


  export type SerialJobAvgAggregateInputType = {
    u_id?: true
    count_round?: true
  }

  export type SerialJobSumAggregateInputType = {
    u_id?: true
    count_round?: true
  }

  export type SerialJobMinAggregateInputType = {
    u_id?: true
    serial_number?: true
    replace_serial?: true
    received_date?: true
    supplier?: true
    date_receipt?: true
    brand_name?: true
    product_code?: true
    product_name?: true
    job_no?: true
    condition?: true
    remark?: true
    count_round?: true
    create_by?: true
    create_time?: true
    update_by?: true
    update_time?: true
    replace_code?: true
    replace_product?: true
    rowuid?: true
  }

  export type SerialJobMaxAggregateInputType = {
    u_id?: true
    serial_number?: true
    replace_serial?: true
    received_date?: true
    supplier?: true
    date_receipt?: true
    brand_name?: true
    product_code?: true
    product_name?: true
    job_no?: true
    condition?: true
    remark?: true
    count_round?: true
    create_by?: true
    create_time?: true
    update_by?: true
    update_time?: true
    replace_code?: true
    replace_product?: true
    rowuid?: true
  }

  export type SerialJobCountAggregateInputType = {
    u_id?: true
    serial_number?: true
    replace_serial?: true
    received_date?: true
    supplier?: true
    date_receipt?: true
    brand_name?: true
    product_code?: true
    product_name?: true
    job_no?: true
    condition?: true
    remark?: true
    count_round?: true
    create_by?: true
    create_time?: true
    update_by?: true
    update_time?: true
    replace_code?: true
    replace_product?: true
    rowuid?: true
    _all?: true
  }

  export type SerialJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SerialJob to aggregate.
     */
    where?: SerialJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SerialJobs to fetch.
     */
    orderBy?: SerialJobOrderByWithRelationInput | SerialJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SerialJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SerialJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SerialJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SerialJobs
    **/
    _count?: true | SerialJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SerialJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SerialJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SerialJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SerialJobMaxAggregateInputType
  }

  export type GetSerialJobAggregateType<T extends SerialJobAggregateArgs> = {
        [P in keyof T & keyof AggregateSerialJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSerialJob[P]>
      : GetScalarType<T[P], AggregateSerialJob[P]>
  }




  export type SerialJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerialJobWhereInput
    orderBy?: SerialJobOrderByWithAggregationInput | SerialJobOrderByWithAggregationInput[]
    by: SerialJobScalarFieldEnum[] | SerialJobScalarFieldEnum
    having?: SerialJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SerialJobCountAggregateInputType | true
    _avg?: SerialJobAvgAggregateInputType
    _sum?: SerialJobSumAggregateInputType
    _min?: SerialJobMinAggregateInputType
    _max?: SerialJobMaxAggregateInputType
  }

  export type SerialJobGroupByOutputType = {
    u_id: number
    serial_number: string
    replace_serial: string | null
    received_date: Date
    supplier: string | null
    date_receipt: Date | null
    brand_name: string | null
    product_code: string | null
    product_name: string | null
    job_no: string | null
    condition: string | null
    remark: string | null
    count_round: number | null
    create_by: string | null
    create_time: Date
    update_by: string | null
    update_time: Date
    replace_code: string | null
    replace_product: string | null
    rowuid: string
    _count: SerialJobCountAggregateOutputType | null
    _avg: SerialJobAvgAggregateOutputType | null
    _sum: SerialJobSumAggregateOutputType | null
    _min: SerialJobMinAggregateOutputType | null
    _max: SerialJobMaxAggregateOutputType | null
  }

  type GetSerialJobGroupByPayload<T extends SerialJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SerialJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SerialJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SerialJobGroupByOutputType[P]>
            : GetScalarType<T[P], SerialJobGroupByOutputType[P]>
        }
      >
    >


  export type SerialJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    serial_number?: boolean
    replace_serial?: boolean
    received_date?: boolean
    supplier?: boolean
    date_receipt?: boolean
    brand_name?: boolean
    product_code?: boolean
    product_name?: boolean
    job_no?: boolean
    condition?: boolean
    remark?: boolean
    count_round?: boolean
    create_by?: boolean
    create_time?: boolean
    update_by?: boolean
    update_time?: boolean
    replace_code?: boolean
    replace_product?: boolean
    rowuid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serialJob"]>

  export type SerialJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    serial_number?: boolean
    replace_serial?: boolean
    received_date?: boolean
    supplier?: boolean
    date_receipt?: boolean
    brand_name?: boolean
    product_code?: boolean
    product_name?: boolean
    job_no?: boolean
    condition?: boolean
    remark?: boolean
    count_round?: boolean
    create_by?: boolean
    create_time?: boolean
    update_by?: boolean
    update_time?: boolean
    replace_code?: boolean
    replace_product?: boolean
    rowuid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serialJob"]>

  export type SerialJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    u_id?: boolean
    serial_number?: boolean
    replace_serial?: boolean
    received_date?: boolean
    supplier?: boolean
    date_receipt?: boolean
    brand_name?: boolean
    product_code?: boolean
    product_name?: boolean
    job_no?: boolean
    condition?: boolean
    remark?: boolean
    count_round?: boolean
    create_by?: boolean
    create_time?: boolean
    update_by?: boolean
    update_time?: boolean
    replace_code?: boolean
    replace_product?: boolean
    rowuid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serialJob"]>

  export type SerialJobSelectScalar = {
    u_id?: boolean
    serial_number?: boolean
    replace_serial?: boolean
    received_date?: boolean
    supplier?: boolean
    date_receipt?: boolean
    brand_name?: boolean
    product_code?: boolean
    product_name?: boolean
    job_no?: boolean
    condition?: boolean
    remark?: boolean
    count_round?: boolean
    create_by?: boolean
    create_time?: boolean
    update_by?: boolean
    update_time?: boolean
    replace_code?: boolean
    replace_product?: boolean
    rowuid?: boolean
  }

  export type SerialJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"u_id" | "serial_number" | "replace_serial" | "received_date" | "supplier" | "date_receipt" | "brand_name" | "product_code" | "product_name" | "job_no" | "condition" | "remark" | "count_round" | "create_by" | "create_time" | "update_by" | "update_time" | "replace_code" | "replace_product" | "rowuid", ExtArgs["result"]["serialJob"]>
  export type SerialJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SerialJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SerialJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SerialJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SerialJob"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      u_id: number
      serial_number: string
      replace_serial: string | null
      received_date: Date
      supplier: string | null
      date_receipt: Date | null
      brand_name: string | null
      product_code: string | null
      product_name: string | null
      job_no: string | null
      condition: string | null
      remark: string | null
      count_round: number | null
      create_by: string | null
      create_time: Date
      update_by: string | null
      update_time: Date
      replace_code: string | null
      replace_product: string | null
      rowuid: string
    }, ExtArgs["result"]["serialJob"]>
    composites: {}
  }

  type SerialJobGetPayload<S extends boolean | null | undefined | SerialJobDefaultArgs> = $Result.GetResult<Prisma.$SerialJobPayload, S>

  type SerialJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SerialJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SerialJobCountAggregateInputType | true
    }

  export interface SerialJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SerialJob'], meta: { name: 'SerialJob' } }
    /**
     * Find zero or one SerialJob that matches the filter.
     * @param {SerialJobFindUniqueArgs} args - Arguments to find a SerialJob
     * @example
     * // Get one SerialJob
     * const serialJob = await prisma.serialJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SerialJobFindUniqueArgs>(args: SelectSubset<T, SerialJobFindUniqueArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SerialJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SerialJobFindUniqueOrThrowArgs} args - Arguments to find a SerialJob
     * @example
     * // Get one SerialJob
     * const serialJob = await prisma.serialJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SerialJobFindUniqueOrThrowArgs>(args: SelectSubset<T, SerialJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SerialJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobFindFirstArgs} args - Arguments to find a SerialJob
     * @example
     * // Get one SerialJob
     * const serialJob = await prisma.serialJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SerialJobFindFirstArgs>(args?: SelectSubset<T, SerialJobFindFirstArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SerialJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobFindFirstOrThrowArgs} args - Arguments to find a SerialJob
     * @example
     * // Get one SerialJob
     * const serialJob = await prisma.serialJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SerialJobFindFirstOrThrowArgs>(args?: SelectSubset<T, SerialJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SerialJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SerialJobs
     * const serialJobs = await prisma.serialJob.findMany()
     * 
     * // Get first 10 SerialJobs
     * const serialJobs = await prisma.serialJob.findMany({ take: 10 })
     * 
     * // Only select the `u_id`
     * const serialJobWithU_idOnly = await prisma.serialJob.findMany({ select: { u_id: true } })
     * 
     */
    findMany<T extends SerialJobFindManyArgs>(args?: SelectSubset<T, SerialJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SerialJob.
     * @param {SerialJobCreateArgs} args - Arguments to create a SerialJob.
     * @example
     * // Create one SerialJob
     * const SerialJob = await prisma.serialJob.create({
     *   data: {
     *     // ... data to create a SerialJob
     *   }
     * })
     * 
     */
    create<T extends SerialJobCreateArgs>(args: SelectSubset<T, SerialJobCreateArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SerialJobs.
     * @param {SerialJobCreateManyArgs} args - Arguments to create many SerialJobs.
     * @example
     * // Create many SerialJobs
     * const serialJob = await prisma.serialJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SerialJobCreateManyArgs>(args?: SelectSubset<T, SerialJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SerialJobs and returns the data saved in the database.
     * @param {SerialJobCreateManyAndReturnArgs} args - Arguments to create many SerialJobs.
     * @example
     * // Create many SerialJobs
     * const serialJob = await prisma.serialJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SerialJobs and only return the `u_id`
     * const serialJobWithU_idOnly = await prisma.serialJob.createManyAndReturn({
     *   select: { u_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SerialJobCreateManyAndReturnArgs>(args?: SelectSubset<T, SerialJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SerialJob.
     * @param {SerialJobDeleteArgs} args - Arguments to delete one SerialJob.
     * @example
     * // Delete one SerialJob
     * const SerialJob = await prisma.serialJob.delete({
     *   where: {
     *     // ... filter to delete one SerialJob
     *   }
     * })
     * 
     */
    delete<T extends SerialJobDeleteArgs>(args: SelectSubset<T, SerialJobDeleteArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SerialJob.
     * @param {SerialJobUpdateArgs} args - Arguments to update one SerialJob.
     * @example
     * // Update one SerialJob
     * const serialJob = await prisma.serialJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SerialJobUpdateArgs>(args: SelectSubset<T, SerialJobUpdateArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SerialJobs.
     * @param {SerialJobDeleteManyArgs} args - Arguments to filter SerialJobs to delete.
     * @example
     * // Delete a few SerialJobs
     * const { count } = await prisma.serialJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SerialJobDeleteManyArgs>(args?: SelectSubset<T, SerialJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SerialJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SerialJobs
     * const serialJob = await prisma.serialJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SerialJobUpdateManyArgs>(args: SelectSubset<T, SerialJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SerialJobs and returns the data updated in the database.
     * @param {SerialJobUpdateManyAndReturnArgs} args - Arguments to update many SerialJobs.
     * @example
     * // Update many SerialJobs
     * const serialJob = await prisma.serialJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SerialJobs and only return the `u_id`
     * const serialJobWithU_idOnly = await prisma.serialJob.updateManyAndReturn({
     *   select: { u_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SerialJobUpdateManyAndReturnArgs>(args: SelectSubset<T, SerialJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SerialJob.
     * @param {SerialJobUpsertArgs} args - Arguments to update or create a SerialJob.
     * @example
     * // Update or create a SerialJob
     * const serialJob = await prisma.serialJob.upsert({
     *   create: {
     *     // ... data to create a SerialJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SerialJob we want to update
     *   }
     * })
     */
    upsert<T extends SerialJobUpsertArgs>(args: SelectSubset<T, SerialJobUpsertArgs<ExtArgs>>): Prisma__SerialJobClient<$Result.GetResult<Prisma.$SerialJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SerialJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobCountArgs} args - Arguments to filter SerialJobs to count.
     * @example
     * // Count the number of SerialJobs
     * const count = await prisma.serialJob.count({
     *   where: {
     *     // ... the filter for the SerialJobs we want to count
     *   }
     * })
    **/
    count<T extends SerialJobCountArgs>(
      args?: Subset<T, SerialJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SerialJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SerialJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SerialJobAggregateArgs>(args: Subset<T, SerialJobAggregateArgs>): Prisma.PrismaPromise<GetSerialJobAggregateType<T>>

    /**
     * Group by SerialJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerialJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SerialJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SerialJobGroupByArgs['orderBy'] }
        : { orderBy?: SerialJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SerialJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSerialJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SerialJob model
   */
  readonly fields: SerialJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SerialJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SerialJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SerialJob model
   */
  interface SerialJobFieldRefs {
    readonly u_id: FieldRef<"SerialJob", 'Int'>
    readonly serial_number: FieldRef<"SerialJob", 'String'>
    readonly replace_serial: FieldRef<"SerialJob", 'String'>
    readonly received_date: FieldRef<"SerialJob", 'DateTime'>
    readonly supplier: FieldRef<"SerialJob", 'String'>
    readonly date_receipt: FieldRef<"SerialJob", 'DateTime'>
    readonly brand_name: FieldRef<"SerialJob", 'String'>
    readonly product_code: FieldRef<"SerialJob", 'String'>
    readonly product_name: FieldRef<"SerialJob", 'String'>
    readonly job_no: FieldRef<"SerialJob", 'String'>
    readonly condition: FieldRef<"SerialJob", 'String'>
    readonly remark: FieldRef<"SerialJob", 'String'>
    readonly count_round: FieldRef<"SerialJob", 'Int'>
    readonly create_by: FieldRef<"SerialJob", 'String'>
    readonly create_time: FieldRef<"SerialJob", 'DateTime'>
    readonly update_by: FieldRef<"SerialJob", 'String'>
    readonly update_time: FieldRef<"SerialJob", 'DateTime'>
    readonly replace_code: FieldRef<"SerialJob", 'String'>
    readonly replace_product: FieldRef<"SerialJob", 'String'>
    readonly rowuid: FieldRef<"SerialJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SerialJob findUnique
   */
  export type SerialJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter, which SerialJob to fetch.
     */
    where: SerialJobWhereUniqueInput
  }

  /**
   * SerialJob findUniqueOrThrow
   */
  export type SerialJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter, which SerialJob to fetch.
     */
    where: SerialJobWhereUniqueInput
  }

  /**
   * SerialJob findFirst
   */
  export type SerialJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter, which SerialJob to fetch.
     */
    where?: SerialJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SerialJobs to fetch.
     */
    orderBy?: SerialJobOrderByWithRelationInput | SerialJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SerialJobs.
     */
    cursor?: SerialJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SerialJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SerialJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SerialJobs.
     */
    distinct?: SerialJobScalarFieldEnum | SerialJobScalarFieldEnum[]
  }

  /**
   * SerialJob findFirstOrThrow
   */
  export type SerialJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter, which SerialJob to fetch.
     */
    where?: SerialJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SerialJobs to fetch.
     */
    orderBy?: SerialJobOrderByWithRelationInput | SerialJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SerialJobs.
     */
    cursor?: SerialJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SerialJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SerialJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SerialJobs.
     */
    distinct?: SerialJobScalarFieldEnum | SerialJobScalarFieldEnum[]
  }

  /**
   * SerialJob findMany
   */
  export type SerialJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter, which SerialJobs to fetch.
     */
    where?: SerialJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SerialJobs to fetch.
     */
    orderBy?: SerialJobOrderByWithRelationInput | SerialJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SerialJobs.
     */
    cursor?: SerialJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SerialJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SerialJobs.
     */
    skip?: number
    distinct?: SerialJobScalarFieldEnum | SerialJobScalarFieldEnum[]
  }

  /**
   * SerialJob create
   */
  export type SerialJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * The data needed to create a SerialJob.
     */
    data: XOR<SerialJobCreateInput, SerialJobUncheckedCreateInput>
  }

  /**
   * SerialJob createMany
   */
  export type SerialJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SerialJobs.
     */
    data: SerialJobCreateManyInput | SerialJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SerialJob createManyAndReturn
   */
  export type SerialJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * The data used to create many SerialJobs.
     */
    data: SerialJobCreateManyInput | SerialJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SerialJob update
   */
  export type SerialJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * The data needed to update a SerialJob.
     */
    data: XOR<SerialJobUpdateInput, SerialJobUncheckedUpdateInput>
    /**
     * Choose, which SerialJob to update.
     */
    where: SerialJobWhereUniqueInput
  }

  /**
   * SerialJob updateMany
   */
  export type SerialJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SerialJobs.
     */
    data: XOR<SerialJobUpdateManyMutationInput, SerialJobUncheckedUpdateManyInput>
    /**
     * Filter which SerialJobs to update
     */
    where?: SerialJobWhereInput
    /**
     * Limit how many SerialJobs to update.
     */
    limit?: number
  }

  /**
   * SerialJob updateManyAndReturn
   */
  export type SerialJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * The data used to update SerialJobs.
     */
    data: XOR<SerialJobUpdateManyMutationInput, SerialJobUncheckedUpdateManyInput>
    /**
     * Filter which SerialJobs to update
     */
    where?: SerialJobWhereInput
    /**
     * Limit how many SerialJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SerialJob upsert
   */
  export type SerialJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * The filter to search for the SerialJob to update in case it exists.
     */
    where: SerialJobWhereUniqueInput
    /**
     * In case the SerialJob found by the `where` argument doesn't exist, create a new SerialJob with this data.
     */
    create: XOR<SerialJobCreateInput, SerialJobUncheckedCreateInput>
    /**
     * In case the SerialJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SerialJobUpdateInput, SerialJobUncheckedUpdateInput>
  }

  /**
   * SerialJob delete
   */
  export type SerialJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
    /**
     * Filter which SerialJob to delete.
     */
    where: SerialJobWhereUniqueInput
  }

  /**
   * SerialJob deleteMany
   */
  export type SerialJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SerialJobs to delete
     */
    where?: SerialJobWhereInput
    /**
     * Limit how many SerialJobs to delete.
     */
    limit?: number
  }

  /**
   * SerialJob without action
   */
  export type SerialJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerialJob
     */
    select?: SerialJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SerialJob
     */
    omit?: SerialJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerialJobInclude<ExtArgs> | null
  }


  /**
   * Model ProductMaster
   */

  export type AggregateProductMaster = {
    _count: ProductMasterCountAggregateOutputType | null
    _avg: ProductMasterAvgAggregateOutputType | null
    _sum: ProductMasterSumAggregateOutputType | null
    _min: ProductMasterMinAggregateOutputType | null
    _max: ProductMasterMaxAggregateOutputType | null
  }

  export type ProductMasterAvgAggregateOutputType = {
    oid: number | null
  }

  export type ProductMasterSumAggregateOutputType = {
    oid: number | null
  }

  export type ProductMasterMinAggregateOutputType = {
    oid: number | null
    product_code: string | null
    brand_name: string | null
    product_name: string | null
  }

  export type ProductMasterMaxAggregateOutputType = {
    oid: number | null
    product_code: string | null
    brand_name: string | null
    product_name: string | null
  }

  export type ProductMasterCountAggregateOutputType = {
    oid: number
    product_code: number
    brand_name: number
    product_name: number
    _all: number
  }


  export type ProductMasterAvgAggregateInputType = {
    oid?: true
  }

  export type ProductMasterSumAggregateInputType = {
    oid?: true
  }

  export type ProductMasterMinAggregateInputType = {
    oid?: true
    product_code?: true
    brand_name?: true
    product_name?: true
  }

  export type ProductMasterMaxAggregateInputType = {
    oid?: true
    product_code?: true
    brand_name?: true
    product_name?: true
  }

  export type ProductMasterCountAggregateInputType = {
    oid?: true
    product_code?: true
    brand_name?: true
    product_name?: true
    _all?: true
  }

  export type ProductMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductMaster to aggregate.
     */
    where?: ProductMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductMasters to fetch.
     */
    orderBy?: ProductMasterOrderByWithRelationInput | ProductMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductMasters
    **/
    _count?: true | ProductMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductMasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductMasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMasterMaxAggregateInputType
  }

  export type GetProductMasterAggregateType<T extends ProductMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateProductMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductMaster[P]>
      : GetScalarType<T[P], AggregateProductMaster[P]>
  }




  export type ProductMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductMasterWhereInput
    orderBy?: ProductMasterOrderByWithAggregationInput | ProductMasterOrderByWithAggregationInput[]
    by: ProductMasterScalarFieldEnum[] | ProductMasterScalarFieldEnum
    having?: ProductMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductMasterCountAggregateInputType | true
    _avg?: ProductMasterAvgAggregateInputType
    _sum?: ProductMasterSumAggregateInputType
    _min?: ProductMasterMinAggregateInputType
    _max?: ProductMasterMaxAggregateInputType
  }

  export type ProductMasterGroupByOutputType = {
    oid: number
    product_code: string
    brand_name: string | null
    product_name: string | null
    _count: ProductMasterCountAggregateOutputType | null
    _avg: ProductMasterAvgAggregateOutputType | null
    _sum: ProductMasterSumAggregateOutputType | null
    _min: ProductMasterMinAggregateOutputType | null
    _max: ProductMasterMaxAggregateOutputType | null
  }

  type GetProductMasterGroupByPayload<T extends ProductMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductMasterGroupByOutputType[P]>
            : GetScalarType<T[P], ProductMasterGroupByOutputType[P]>
        }
      >
    >


  export type ProductMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oid?: boolean
    product_code?: boolean
    brand_name?: boolean
    product_name?: boolean
  }, ExtArgs["result"]["productMaster"]>

  export type ProductMasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oid?: boolean
    product_code?: boolean
    brand_name?: boolean
    product_name?: boolean
  }, ExtArgs["result"]["productMaster"]>

  export type ProductMasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oid?: boolean
    product_code?: boolean
    brand_name?: boolean
    product_name?: boolean
  }, ExtArgs["result"]["productMaster"]>

  export type ProductMasterSelectScalar = {
    oid?: boolean
    product_code?: boolean
    brand_name?: boolean
    product_name?: boolean
  }

  export type ProductMasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"oid" | "product_code" | "brand_name" | "product_name", ExtArgs["result"]["productMaster"]>

  export type $ProductMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductMaster"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      oid: number
      product_code: string
      brand_name: string | null
      product_name: string | null
    }, ExtArgs["result"]["productMaster"]>
    composites: {}
  }

  type ProductMasterGetPayload<S extends boolean | null | undefined | ProductMasterDefaultArgs> = $Result.GetResult<Prisma.$ProductMasterPayload, S>

  type ProductMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductMasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductMasterCountAggregateInputType | true
    }

  export interface ProductMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductMaster'], meta: { name: 'ProductMaster' } }
    /**
     * Find zero or one ProductMaster that matches the filter.
     * @param {ProductMasterFindUniqueArgs} args - Arguments to find a ProductMaster
     * @example
     * // Get one ProductMaster
     * const productMaster = await prisma.productMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductMasterFindUniqueArgs>(args: SelectSubset<T, ProductMasterFindUniqueArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductMaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductMasterFindUniqueOrThrowArgs} args - Arguments to find a ProductMaster
     * @example
     * // Get one ProductMaster
     * const productMaster = await prisma.productMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterFindFirstArgs} args - Arguments to find a ProductMaster
     * @example
     * // Get one ProductMaster
     * const productMaster = await prisma.productMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductMasterFindFirstArgs>(args?: SelectSubset<T, ProductMasterFindFirstArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterFindFirstOrThrowArgs} args - Arguments to find a ProductMaster
     * @example
     * // Get one ProductMaster
     * const productMaster = await prisma.productMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductMasters
     * const productMasters = await prisma.productMaster.findMany()
     * 
     * // Get first 10 ProductMasters
     * const productMasters = await prisma.productMaster.findMany({ take: 10 })
     * 
     * // Only select the `oid`
     * const productMasterWithOidOnly = await prisma.productMaster.findMany({ select: { oid: true } })
     * 
     */
    findMany<T extends ProductMasterFindManyArgs>(args?: SelectSubset<T, ProductMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductMaster.
     * @param {ProductMasterCreateArgs} args - Arguments to create a ProductMaster.
     * @example
     * // Create one ProductMaster
     * const ProductMaster = await prisma.productMaster.create({
     *   data: {
     *     // ... data to create a ProductMaster
     *   }
     * })
     * 
     */
    create<T extends ProductMasterCreateArgs>(args: SelectSubset<T, ProductMasterCreateArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductMasters.
     * @param {ProductMasterCreateManyArgs} args - Arguments to create many ProductMasters.
     * @example
     * // Create many ProductMasters
     * const productMaster = await prisma.productMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductMasterCreateManyArgs>(args?: SelectSubset<T, ProductMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductMasters and returns the data saved in the database.
     * @param {ProductMasterCreateManyAndReturnArgs} args - Arguments to create many ProductMasters.
     * @example
     * // Create many ProductMasters
     * const productMaster = await prisma.productMaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductMasters and only return the `oid`
     * const productMasterWithOidOnly = await prisma.productMaster.createManyAndReturn({
     *   select: { oid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductMasterCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductMasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductMaster.
     * @param {ProductMasterDeleteArgs} args - Arguments to delete one ProductMaster.
     * @example
     * // Delete one ProductMaster
     * const ProductMaster = await prisma.productMaster.delete({
     *   where: {
     *     // ... filter to delete one ProductMaster
     *   }
     * })
     * 
     */
    delete<T extends ProductMasterDeleteArgs>(args: SelectSubset<T, ProductMasterDeleteArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductMaster.
     * @param {ProductMasterUpdateArgs} args - Arguments to update one ProductMaster.
     * @example
     * // Update one ProductMaster
     * const productMaster = await prisma.productMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductMasterUpdateArgs>(args: SelectSubset<T, ProductMasterUpdateArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductMasters.
     * @param {ProductMasterDeleteManyArgs} args - Arguments to filter ProductMasters to delete.
     * @example
     * // Delete a few ProductMasters
     * const { count } = await prisma.productMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductMasterDeleteManyArgs>(args?: SelectSubset<T, ProductMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductMasters
     * const productMaster = await prisma.productMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductMasterUpdateManyArgs>(args: SelectSubset<T, ProductMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductMasters and returns the data updated in the database.
     * @param {ProductMasterUpdateManyAndReturnArgs} args - Arguments to update many ProductMasters.
     * @example
     * // Update many ProductMasters
     * const productMaster = await prisma.productMaster.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductMasters and only return the `oid`
     * const productMasterWithOidOnly = await prisma.productMaster.updateManyAndReturn({
     *   select: { oid: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductMasterUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductMasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductMaster.
     * @param {ProductMasterUpsertArgs} args - Arguments to update or create a ProductMaster.
     * @example
     * // Update or create a ProductMaster
     * const productMaster = await prisma.productMaster.upsert({
     *   create: {
     *     // ... data to create a ProductMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductMaster we want to update
     *   }
     * })
     */
    upsert<T extends ProductMasterUpsertArgs>(args: SelectSubset<T, ProductMasterUpsertArgs<ExtArgs>>): Prisma__ProductMasterClient<$Result.GetResult<Prisma.$ProductMasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterCountArgs} args - Arguments to filter ProductMasters to count.
     * @example
     * // Count the number of ProductMasters
     * const count = await prisma.productMaster.count({
     *   where: {
     *     // ... the filter for the ProductMasters we want to count
     *   }
     * })
    **/
    count<T extends ProductMasterCountArgs>(
      args?: Subset<T, ProductMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductMasterAggregateArgs>(args: Subset<T, ProductMasterAggregateArgs>): Prisma.PrismaPromise<GetProductMasterAggregateType<T>>

    /**
     * Group by ProductMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductMasterGroupByArgs['orderBy'] }
        : { orderBy?: ProductMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductMaster model
   */
  readonly fields: ProductMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductMaster model
   */
  interface ProductMasterFieldRefs {
    readonly oid: FieldRef<"ProductMaster", 'Int'>
    readonly product_code: FieldRef<"ProductMaster", 'String'>
    readonly brand_name: FieldRef<"ProductMaster", 'String'>
    readonly product_name: FieldRef<"ProductMaster", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductMaster findUnique
   */
  export type ProductMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter, which ProductMaster to fetch.
     */
    where: ProductMasterWhereUniqueInput
  }

  /**
   * ProductMaster findUniqueOrThrow
   */
  export type ProductMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter, which ProductMaster to fetch.
     */
    where: ProductMasterWhereUniqueInput
  }

  /**
   * ProductMaster findFirst
   */
  export type ProductMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter, which ProductMaster to fetch.
     */
    where?: ProductMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductMasters to fetch.
     */
    orderBy?: ProductMasterOrderByWithRelationInput | ProductMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductMasters.
     */
    cursor?: ProductMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductMasters.
     */
    distinct?: ProductMasterScalarFieldEnum | ProductMasterScalarFieldEnum[]
  }

  /**
   * ProductMaster findFirstOrThrow
   */
  export type ProductMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter, which ProductMaster to fetch.
     */
    where?: ProductMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductMasters to fetch.
     */
    orderBy?: ProductMasterOrderByWithRelationInput | ProductMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductMasters.
     */
    cursor?: ProductMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductMasters.
     */
    distinct?: ProductMasterScalarFieldEnum | ProductMasterScalarFieldEnum[]
  }

  /**
   * ProductMaster findMany
   */
  export type ProductMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter, which ProductMasters to fetch.
     */
    where?: ProductMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductMasters to fetch.
     */
    orderBy?: ProductMasterOrderByWithRelationInput | ProductMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductMasters.
     */
    cursor?: ProductMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductMasters.
     */
    skip?: number
    distinct?: ProductMasterScalarFieldEnum | ProductMasterScalarFieldEnum[]
  }

  /**
   * ProductMaster create
   */
  export type ProductMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * The data needed to create a ProductMaster.
     */
    data: XOR<ProductMasterCreateInput, ProductMasterUncheckedCreateInput>
  }

  /**
   * ProductMaster createMany
   */
  export type ProductMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductMasters.
     */
    data: ProductMasterCreateManyInput | ProductMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductMaster createManyAndReturn
   */
  export type ProductMasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * The data used to create many ProductMasters.
     */
    data: ProductMasterCreateManyInput | ProductMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductMaster update
   */
  export type ProductMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * The data needed to update a ProductMaster.
     */
    data: XOR<ProductMasterUpdateInput, ProductMasterUncheckedUpdateInput>
    /**
     * Choose, which ProductMaster to update.
     */
    where: ProductMasterWhereUniqueInput
  }

  /**
   * ProductMaster updateMany
   */
  export type ProductMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductMasters.
     */
    data: XOR<ProductMasterUpdateManyMutationInput, ProductMasterUncheckedUpdateManyInput>
    /**
     * Filter which ProductMasters to update
     */
    where?: ProductMasterWhereInput
    /**
     * Limit how many ProductMasters to update.
     */
    limit?: number
  }

  /**
   * ProductMaster updateManyAndReturn
   */
  export type ProductMasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * The data used to update ProductMasters.
     */
    data: XOR<ProductMasterUpdateManyMutationInput, ProductMasterUncheckedUpdateManyInput>
    /**
     * Filter which ProductMasters to update
     */
    where?: ProductMasterWhereInput
    /**
     * Limit how many ProductMasters to update.
     */
    limit?: number
  }

  /**
   * ProductMaster upsert
   */
  export type ProductMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * The filter to search for the ProductMaster to update in case it exists.
     */
    where: ProductMasterWhereUniqueInput
    /**
     * In case the ProductMaster found by the `where` argument doesn't exist, create a new ProductMaster with this data.
     */
    create: XOR<ProductMasterCreateInput, ProductMasterUncheckedCreateInput>
    /**
     * In case the ProductMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductMasterUpdateInput, ProductMasterUncheckedUpdateInput>
  }

  /**
   * ProductMaster delete
   */
  export type ProductMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
    /**
     * Filter which ProductMaster to delete.
     */
    where: ProductMasterWhereUniqueInput
  }

  /**
   * ProductMaster deleteMany
   */
  export type ProductMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductMasters to delete
     */
    where?: ProductMasterWhereInput
    /**
     * Limit how many ProductMasters to delete.
     */
    limit?: number
  }

  /**
   * ProductMaster without action
   */
  export type ProductMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductMaster
     */
    select?: ProductMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductMaster
     */
    omit?: ProductMasterOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    u_id: 'u_id',
    username: 'username',
    password: 'password',
    email: 'email',
    firstname: 'firstname',
    lastname: 'lastname',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SerialJobScalarFieldEnum: {
    u_id: 'u_id',
    serial_number: 'serial_number',
    replace_serial: 'replace_serial',
    received_date: 'received_date',
    supplier: 'supplier',
    date_receipt: 'date_receipt',
    brand_name: 'brand_name',
    product_code: 'product_code',
    product_name: 'product_name',
    job_no: 'job_no',
    condition: 'condition',
    remark: 'remark',
    count_round: 'count_round',
    create_by: 'create_by',
    create_time: 'create_time',
    update_by: 'update_by',
    update_time: 'update_time',
    replace_code: 'replace_code',
    replace_product: 'replace_product',
    rowuid: 'rowuid'
  };

  export type SerialJobScalarFieldEnum = (typeof SerialJobScalarFieldEnum)[keyof typeof SerialJobScalarFieldEnum]


  export const ProductMasterScalarFieldEnum: {
    oid: 'oid',
    product_code: 'product_code',
    brand_name: 'brand_name',
    product_name: 'product_name'
  };

  export type ProductMasterScalarFieldEnum = (typeof ProductMasterScalarFieldEnum)[keyof typeof ProductMasterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    u_id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstname?: StringNullableFilter<"User"> | string | null
    lastname?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    serialJobs?: SerialJobListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    u_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    serialJobs?: SerialJobOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    u_id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstname?: StringNullableFilter<"User"> | string | null
    lastname?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    serialJobs?: SerialJobListRelationFilter
  }, "u_id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    u_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    u_id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastname?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type SerialJobWhereInput = {
    AND?: SerialJobWhereInput | SerialJobWhereInput[]
    OR?: SerialJobWhereInput[]
    NOT?: SerialJobWhereInput | SerialJobWhereInput[]
    u_id?: IntFilter<"SerialJob"> | number
    serial_number?: StringFilter<"SerialJob"> | string
    replace_serial?: StringNullableFilter<"SerialJob"> | string | null
    received_date?: DateTimeFilter<"SerialJob"> | Date | string
    supplier?: StringNullableFilter<"SerialJob"> | string | null
    date_receipt?: DateTimeNullableFilter<"SerialJob"> | Date | string | null
    brand_name?: StringNullableFilter<"SerialJob"> | string | null
    product_code?: StringNullableFilter<"SerialJob"> | string | null
    product_name?: StringNullableFilter<"SerialJob"> | string | null
    job_no?: StringNullableFilter<"SerialJob"> | string | null
    condition?: StringNullableFilter<"SerialJob"> | string | null
    remark?: StringNullableFilter<"SerialJob"> | string | null
    count_round?: IntNullableFilter<"SerialJob"> | number | null
    create_by?: StringNullableFilter<"SerialJob"> | string | null
    create_time?: DateTimeFilter<"SerialJob"> | Date | string
    update_by?: StringNullableFilter<"SerialJob"> | string | null
    update_time?: DateTimeFilter<"SerialJob"> | Date | string
    replace_code?: StringNullableFilter<"SerialJob"> | string | null
    replace_product?: StringNullableFilter<"SerialJob"> | string | null
    rowuid?: StringFilter<"SerialJob"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SerialJobOrderByWithRelationInput = {
    u_id?: SortOrder
    serial_number?: SortOrder
    replace_serial?: SortOrderInput | SortOrder
    received_date?: SortOrder
    supplier?: SortOrderInput | SortOrder
    date_receipt?: SortOrderInput | SortOrder
    brand_name?: SortOrderInput | SortOrder
    product_code?: SortOrderInput | SortOrder
    product_name?: SortOrderInput | SortOrder
    job_no?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    count_round?: SortOrderInput | SortOrder
    create_by?: SortOrderInput | SortOrder
    create_time?: SortOrder
    update_by?: SortOrderInput | SortOrder
    update_time?: SortOrder
    replace_code?: SortOrderInput | SortOrder
    replace_product?: SortOrderInput | SortOrder
    rowuid?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SerialJobWhereUniqueInput = Prisma.AtLeast<{
    serial_number?: string
    rowuid?: string
    AND?: SerialJobWhereInput | SerialJobWhereInput[]
    OR?: SerialJobWhereInput[]
    NOT?: SerialJobWhereInput | SerialJobWhereInput[]
    u_id?: IntFilter<"SerialJob"> | number
    replace_serial?: StringNullableFilter<"SerialJob"> | string | null
    received_date?: DateTimeFilter<"SerialJob"> | Date | string
    supplier?: StringNullableFilter<"SerialJob"> | string | null
    date_receipt?: DateTimeNullableFilter<"SerialJob"> | Date | string | null
    brand_name?: StringNullableFilter<"SerialJob"> | string | null
    product_code?: StringNullableFilter<"SerialJob"> | string | null
    product_name?: StringNullableFilter<"SerialJob"> | string | null
    job_no?: StringNullableFilter<"SerialJob"> | string | null
    condition?: StringNullableFilter<"SerialJob"> | string | null
    remark?: StringNullableFilter<"SerialJob"> | string | null
    count_round?: IntNullableFilter<"SerialJob"> | number | null
    create_by?: StringNullableFilter<"SerialJob"> | string | null
    create_time?: DateTimeFilter<"SerialJob"> | Date | string
    update_by?: StringNullableFilter<"SerialJob"> | string | null
    update_time?: DateTimeFilter<"SerialJob"> | Date | string
    replace_code?: StringNullableFilter<"SerialJob"> | string | null
    replace_product?: StringNullableFilter<"SerialJob"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "rowuid" | "serial_number" | "rowuid">

  export type SerialJobOrderByWithAggregationInput = {
    u_id?: SortOrder
    serial_number?: SortOrder
    replace_serial?: SortOrderInput | SortOrder
    received_date?: SortOrder
    supplier?: SortOrderInput | SortOrder
    date_receipt?: SortOrderInput | SortOrder
    brand_name?: SortOrderInput | SortOrder
    product_code?: SortOrderInput | SortOrder
    product_name?: SortOrderInput | SortOrder
    job_no?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    count_round?: SortOrderInput | SortOrder
    create_by?: SortOrderInput | SortOrder
    create_time?: SortOrder
    update_by?: SortOrderInput | SortOrder
    update_time?: SortOrder
    replace_code?: SortOrderInput | SortOrder
    replace_product?: SortOrderInput | SortOrder
    rowuid?: SortOrder
    _count?: SerialJobCountOrderByAggregateInput
    _avg?: SerialJobAvgOrderByAggregateInput
    _max?: SerialJobMaxOrderByAggregateInput
    _min?: SerialJobMinOrderByAggregateInput
    _sum?: SerialJobSumOrderByAggregateInput
  }

  export type SerialJobScalarWhereWithAggregatesInput = {
    AND?: SerialJobScalarWhereWithAggregatesInput | SerialJobScalarWhereWithAggregatesInput[]
    OR?: SerialJobScalarWhereWithAggregatesInput[]
    NOT?: SerialJobScalarWhereWithAggregatesInput | SerialJobScalarWhereWithAggregatesInput[]
    u_id?: IntWithAggregatesFilter<"SerialJob"> | number
    serial_number?: StringWithAggregatesFilter<"SerialJob"> | string
    replace_serial?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    received_date?: DateTimeWithAggregatesFilter<"SerialJob"> | Date | string
    supplier?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    date_receipt?: DateTimeNullableWithAggregatesFilter<"SerialJob"> | Date | string | null
    brand_name?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    product_code?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    product_name?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    job_no?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    condition?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    remark?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    count_round?: IntNullableWithAggregatesFilter<"SerialJob"> | number | null
    create_by?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    create_time?: DateTimeWithAggregatesFilter<"SerialJob"> | Date | string
    update_by?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    update_time?: DateTimeWithAggregatesFilter<"SerialJob"> | Date | string
    replace_code?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    replace_product?: StringNullableWithAggregatesFilter<"SerialJob"> | string | null
    rowuid?: StringWithAggregatesFilter<"SerialJob"> | string
  }

  export type ProductMasterWhereInput = {
    AND?: ProductMasterWhereInput | ProductMasterWhereInput[]
    OR?: ProductMasterWhereInput[]
    NOT?: ProductMasterWhereInput | ProductMasterWhereInput[]
    oid?: IntFilter<"ProductMaster"> | number
    product_code?: StringFilter<"ProductMaster"> | string
    brand_name?: StringNullableFilter<"ProductMaster"> | string | null
    product_name?: StringNullableFilter<"ProductMaster"> | string | null
  }

  export type ProductMasterOrderByWithRelationInput = {
    oid?: SortOrder
    product_code?: SortOrder
    brand_name?: SortOrderInput | SortOrder
    product_name?: SortOrderInput | SortOrder
  }

  export type ProductMasterWhereUniqueInput = Prisma.AtLeast<{
    oid?: number
    product_code?: string
    AND?: ProductMasterWhereInput | ProductMasterWhereInput[]
    OR?: ProductMasterWhereInput[]
    NOT?: ProductMasterWhereInput | ProductMasterWhereInput[]
    brand_name?: StringNullableFilter<"ProductMaster"> | string | null
    product_name?: StringNullableFilter<"ProductMaster"> | string | null
  }, "oid" | "product_code">

  export type ProductMasterOrderByWithAggregationInput = {
    oid?: SortOrder
    product_code?: SortOrder
    brand_name?: SortOrderInput | SortOrder
    product_name?: SortOrderInput | SortOrder
    _count?: ProductMasterCountOrderByAggregateInput
    _avg?: ProductMasterAvgOrderByAggregateInput
    _max?: ProductMasterMaxOrderByAggregateInput
    _min?: ProductMasterMinOrderByAggregateInput
    _sum?: ProductMasterSumOrderByAggregateInput
  }

  export type ProductMasterScalarWhereWithAggregatesInput = {
    AND?: ProductMasterScalarWhereWithAggregatesInput | ProductMasterScalarWhereWithAggregatesInput[]
    OR?: ProductMasterScalarWhereWithAggregatesInput[]
    NOT?: ProductMasterScalarWhereWithAggregatesInput | ProductMasterScalarWhereWithAggregatesInput[]
    oid?: IntWithAggregatesFilter<"ProductMaster"> | number
    product_code?: StringWithAggregatesFilter<"ProductMaster"> | string
    brand_name?: StringNullableWithAggregatesFilter<"ProductMaster"> | string | null
    product_name?: StringNullableWithAggregatesFilter<"ProductMaster"> | string | null
  }

  export type UserCreateInput = {
    username: string
    password: string
    email: string
    firstname?: string | null
    lastname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    serialJobs?: SerialJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    u_id?: number
    username: string
    password: string
    email: string
    firstname?: string | null
    lastname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    serialJobs?: SerialJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    serialJobs?: SerialJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    u_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    serialJobs?: SerialJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    u_id?: number
    username: string
    password: string
    email: string
    firstname?: string | null
    lastname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    u_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SerialJobCreateInput = {
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
    user: UserCreateNestedOneWithoutSerialJobsInput
  }

  export type SerialJobUncheckedCreateInput = {
    u_id: number
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
  }

  export type SerialJobUpdateInput = {
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSerialJobsNestedInput
  }

  export type SerialJobUncheckedUpdateInput = {
    u_id?: IntFieldUpdateOperationsInput | number
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }

  export type SerialJobCreateManyInput = {
    u_id: number
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
  }

  export type SerialJobUpdateManyMutationInput = {
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }

  export type SerialJobUncheckedUpdateManyInput = {
    u_id?: IntFieldUpdateOperationsInput | number
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }

  export type ProductMasterCreateInput = {
    product_code: string
    brand_name?: string | null
    product_name?: string | null
  }

  export type ProductMasterUncheckedCreateInput = {
    oid?: number
    product_code: string
    brand_name?: string | null
    product_name?: string | null
  }

  export type ProductMasterUpdateInput = {
    product_code?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductMasterUncheckedUpdateInput = {
    oid?: IntFieldUpdateOperationsInput | number
    product_code?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductMasterCreateManyInput = {
    oid?: number
    product_code: string
    brand_name?: string | null
    product_name?: string | null
  }

  export type ProductMasterUpdateManyMutationInput = {
    product_code?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductMasterUncheckedUpdateManyInput = {
    oid?: IntFieldUpdateOperationsInput | number
    product_code?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SerialJobListRelationFilter = {
    every?: SerialJobWhereInput
    some?: SerialJobWhereInput
    none?: SerialJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SerialJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    u_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    u_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    u_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    u_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    u_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SerialJobCountOrderByAggregateInput = {
    u_id?: SortOrder
    serial_number?: SortOrder
    replace_serial?: SortOrder
    received_date?: SortOrder
    supplier?: SortOrder
    date_receipt?: SortOrder
    brand_name?: SortOrder
    product_code?: SortOrder
    product_name?: SortOrder
    job_no?: SortOrder
    condition?: SortOrder
    remark?: SortOrder
    count_round?: SortOrder
    create_by?: SortOrder
    create_time?: SortOrder
    update_by?: SortOrder
    update_time?: SortOrder
    replace_code?: SortOrder
    replace_product?: SortOrder
    rowuid?: SortOrder
  }

  export type SerialJobAvgOrderByAggregateInput = {
    u_id?: SortOrder
    count_round?: SortOrder
  }

  export type SerialJobMaxOrderByAggregateInput = {
    u_id?: SortOrder
    serial_number?: SortOrder
    replace_serial?: SortOrder
    received_date?: SortOrder
    supplier?: SortOrder
    date_receipt?: SortOrder
    brand_name?: SortOrder
    product_code?: SortOrder
    product_name?: SortOrder
    job_no?: SortOrder
    condition?: SortOrder
    remark?: SortOrder
    count_round?: SortOrder
    create_by?: SortOrder
    create_time?: SortOrder
    update_by?: SortOrder
    update_time?: SortOrder
    replace_code?: SortOrder
    replace_product?: SortOrder
    rowuid?: SortOrder
  }

  export type SerialJobMinOrderByAggregateInput = {
    u_id?: SortOrder
    serial_number?: SortOrder
    replace_serial?: SortOrder
    received_date?: SortOrder
    supplier?: SortOrder
    date_receipt?: SortOrder
    brand_name?: SortOrder
    product_code?: SortOrder
    product_name?: SortOrder
    job_no?: SortOrder
    condition?: SortOrder
    remark?: SortOrder
    count_round?: SortOrder
    create_by?: SortOrder
    create_time?: SortOrder
    update_by?: SortOrder
    update_time?: SortOrder
    replace_code?: SortOrder
    replace_product?: SortOrder
    rowuid?: SortOrder
  }

  export type SerialJobSumOrderByAggregateInput = {
    u_id?: SortOrder
    count_round?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ProductMasterCountOrderByAggregateInput = {
    oid?: SortOrder
    product_code?: SortOrder
    brand_name?: SortOrder
    product_name?: SortOrder
  }

  export type ProductMasterAvgOrderByAggregateInput = {
    oid?: SortOrder
  }

  export type ProductMasterMaxOrderByAggregateInput = {
    oid?: SortOrder
    product_code?: SortOrder
    brand_name?: SortOrder
    product_name?: SortOrder
  }

  export type ProductMasterMinOrderByAggregateInput = {
    oid?: SortOrder
    product_code?: SortOrder
    brand_name?: SortOrder
    product_name?: SortOrder
  }

  export type ProductMasterSumOrderByAggregateInput = {
    oid?: SortOrder
  }

  export type SerialJobCreateNestedManyWithoutUserInput = {
    create?: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput> | SerialJobCreateWithoutUserInput[] | SerialJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerialJobCreateOrConnectWithoutUserInput | SerialJobCreateOrConnectWithoutUserInput[]
    createMany?: SerialJobCreateManyUserInputEnvelope
    connect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
  }

  export type SerialJobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput> | SerialJobCreateWithoutUserInput[] | SerialJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerialJobCreateOrConnectWithoutUserInput | SerialJobCreateOrConnectWithoutUserInput[]
    createMany?: SerialJobCreateManyUserInputEnvelope
    connect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SerialJobUpdateManyWithoutUserNestedInput = {
    create?: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput> | SerialJobCreateWithoutUserInput[] | SerialJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerialJobCreateOrConnectWithoutUserInput | SerialJobCreateOrConnectWithoutUserInput[]
    upsert?: SerialJobUpsertWithWhereUniqueWithoutUserInput | SerialJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SerialJobCreateManyUserInputEnvelope
    set?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    disconnect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    delete?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    connect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    update?: SerialJobUpdateWithWhereUniqueWithoutUserInput | SerialJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SerialJobUpdateManyWithWhereWithoutUserInput | SerialJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SerialJobScalarWhereInput | SerialJobScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SerialJobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput> | SerialJobCreateWithoutUserInput[] | SerialJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerialJobCreateOrConnectWithoutUserInput | SerialJobCreateOrConnectWithoutUserInput[]
    upsert?: SerialJobUpsertWithWhereUniqueWithoutUserInput | SerialJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SerialJobCreateManyUserInputEnvelope
    set?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    disconnect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    delete?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    connect?: SerialJobWhereUniqueInput | SerialJobWhereUniqueInput[]
    update?: SerialJobUpdateWithWhereUniqueWithoutUserInput | SerialJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SerialJobUpdateManyWithWhereWithoutUserInput | SerialJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SerialJobScalarWhereInput | SerialJobScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSerialJobsInput = {
    create?: XOR<UserCreateWithoutSerialJobsInput, UserUncheckedCreateWithoutSerialJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSerialJobsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSerialJobsNestedInput = {
    create?: XOR<UserCreateWithoutSerialJobsInput, UserUncheckedCreateWithoutSerialJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSerialJobsInput
    upsert?: UserUpsertWithoutSerialJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSerialJobsInput, UserUpdateWithoutSerialJobsInput>, UserUncheckedUpdateWithoutSerialJobsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SerialJobCreateWithoutUserInput = {
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
  }

  export type SerialJobUncheckedCreateWithoutUserInput = {
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
  }

  export type SerialJobCreateOrConnectWithoutUserInput = {
    where: SerialJobWhereUniqueInput
    create: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput>
  }

  export type SerialJobCreateManyUserInputEnvelope = {
    data: SerialJobCreateManyUserInput | SerialJobCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SerialJobUpsertWithWhereUniqueWithoutUserInput = {
    where: SerialJobWhereUniqueInput
    update: XOR<SerialJobUpdateWithoutUserInput, SerialJobUncheckedUpdateWithoutUserInput>
    create: XOR<SerialJobCreateWithoutUserInput, SerialJobUncheckedCreateWithoutUserInput>
  }

  export type SerialJobUpdateWithWhereUniqueWithoutUserInput = {
    where: SerialJobWhereUniqueInput
    data: XOR<SerialJobUpdateWithoutUserInput, SerialJobUncheckedUpdateWithoutUserInput>
  }

  export type SerialJobUpdateManyWithWhereWithoutUserInput = {
    where: SerialJobScalarWhereInput
    data: XOR<SerialJobUpdateManyMutationInput, SerialJobUncheckedUpdateManyWithoutUserInput>
  }

  export type SerialJobScalarWhereInput = {
    AND?: SerialJobScalarWhereInput | SerialJobScalarWhereInput[]
    OR?: SerialJobScalarWhereInput[]
    NOT?: SerialJobScalarWhereInput | SerialJobScalarWhereInput[]
    u_id?: IntFilter<"SerialJob"> | number
    serial_number?: StringFilter<"SerialJob"> | string
    replace_serial?: StringNullableFilter<"SerialJob"> | string | null
    received_date?: DateTimeFilter<"SerialJob"> | Date | string
    supplier?: StringNullableFilter<"SerialJob"> | string | null
    date_receipt?: DateTimeNullableFilter<"SerialJob"> | Date | string | null
    brand_name?: StringNullableFilter<"SerialJob"> | string | null
    product_code?: StringNullableFilter<"SerialJob"> | string | null
    product_name?: StringNullableFilter<"SerialJob"> | string | null
    job_no?: StringNullableFilter<"SerialJob"> | string | null
    condition?: StringNullableFilter<"SerialJob"> | string | null
    remark?: StringNullableFilter<"SerialJob"> | string | null
    count_round?: IntNullableFilter<"SerialJob"> | number | null
    create_by?: StringNullableFilter<"SerialJob"> | string | null
    create_time?: DateTimeFilter<"SerialJob"> | Date | string
    update_by?: StringNullableFilter<"SerialJob"> | string | null
    update_time?: DateTimeFilter<"SerialJob"> | Date | string
    replace_code?: StringNullableFilter<"SerialJob"> | string | null
    replace_product?: StringNullableFilter<"SerialJob"> | string | null
    rowuid?: StringFilter<"SerialJob"> | string
  }

  export type UserCreateWithoutSerialJobsInput = {
    username: string
    password: string
    email: string
    firstname?: string | null
    lastname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
  }

  export type UserUncheckedCreateWithoutSerialJobsInput = {
    u_id?: number
    username: string
    password: string
    email: string
    firstname?: string | null
    lastname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
  }

  export type UserCreateOrConnectWithoutSerialJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSerialJobsInput, UserUncheckedCreateWithoutSerialJobsInput>
  }

  export type UserUpsertWithoutSerialJobsInput = {
    update: XOR<UserUpdateWithoutSerialJobsInput, UserUncheckedUpdateWithoutSerialJobsInput>
    create: XOR<UserCreateWithoutSerialJobsInput, UserUncheckedCreateWithoutSerialJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSerialJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSerialJobsInput, UserUncheckedUpdateWithoutSerialJobsInput>
  }

  export type UserUpdateWithoutSerialJobsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSerialJobsInput = {
    u_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SerialJobCreateManyUserInput = {
    serial_number: string
    replace_serial?: string | null
    received_date: Date | string
    supplier?: string | null
    date_receipt?: Date | string | null
    brand_name?: string | null
    product_code?: string | null
    product_name?: string | null
    job_no?: string | null
    condition?: string | null
    remark?: string | null
    count_round?: number | null
    create_by?: string | null
    create_time?: Date | string
    update_by?: string | null
    update_time?: Date | string
    replace_code?: string | null
    replace_product?: string | null
    rowuid?: string
  }

  export type SerialJobUpdateWithoutUserInput = {
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }

  export type SerialJobUncheckedUpdateWithoutUserInput = {
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }

  export type SerialJobUncheckedUpdateManyWithoutUserInput = {
    serial_number?: StringFieldUpdateOperationsInput | string
    replace_serial?: NullableStringFieldUpdateOperationsInput | string | null
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    date_receipt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_code?: NullableStringFieldUpdateOperationsInput | string | null
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_no?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    count_round?: NullableIntFieldUpdateOperationsInput | number | null
    create_by?: NullableStringFieldUpdateOperationsInput | string | null
    create_time?: DateTimeFieldUpdateOperationsInput | Date | string
    update_by?: NullableStringFieldUpdateOperationsInput | string | null
    update_time?: DateTimeFieldUpdateOperationsInput | Date | string
    replace_code?: NullableStringFieldUpdateOperationsInput | string | null
    replace_product?: NullableStringFieldUpdateOperationsInput | string | null
    rowuid?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}