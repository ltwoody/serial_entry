# Specify the Docker Compose file format version
version: "3.8"

# Define the services (containers) for your application
services:
  serial-entry:
    # Build the Docker image from the Dockerfile in the current directory
    build:
      context: . # The build context is the current directory (where docker-compose.yml is)
      dockerfile: Dockerfile # Specify the Dockerfile to use for building

    # Map ports from the container to the host machine
    # Format: "HOST_PORT:CONTAINER_PORT"
    # This allows you to access your Next.js app on http://localhost:3000
    ports:
      - "5431:5431"

    # Mount volumes for persistent data and hot-reloading during development
    volumes:
      # Mount the entire current host directory into the container's /app directory.
      # This enables hot-reloading for your source code changes (e.g., in the 'app' folder).
      - .:/app
      # Create an anonymous volume for node_modules inside the container.
      # This prevents issues with host-OS specific node_modules installations and
      # ensures dependencies are managed purely within the container.
      - /app/node_modules
      # This volume explicitly handles the .next build output. While often covered by the
      # main volume mount, sometimes issues arise with hot-reloading this directory.
      # Explicitly mounting it as an anonymous volume can help in some cases.
      - /app/.next
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro

    # Set the working directory inside the container for this service
    working_dir: /app

    # Set environment variables that your Next.js application might need
    # This example sets NODE_ENV for development-specific behavior
    environment:
      - NODE_ENV=production
      # Add any other environment variables your Next.js app requires, e.g.:
      # - NEXT_PUBLIC_API_URL=http://localhost:8080/api
