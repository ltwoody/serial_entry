# worker_processes is the number of worker processes to spawn.
# auto means Nginx will try to auto-detect the number of CPU cores.
worker_processes auto;

# Events block defines the environment for connection processing.
events {
    # worker_connections defines the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

# HTTP block contains directives for handling HTTP web traffic.
http {
    # Default MIME types for files.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # log_format defines the format for log entries.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log specifies the log file for access logs.
    access_log /var/log/nginx/access.log main;
    # error_log specifies the log file for error logs.
    error_log /var/log/nginx/error.log warn;

    # sendfile enables the use of sendfile() system call for faster file transfers.
    sendfile on;
    # tcp_nopush enables or disables the use of the TCP_NOPUSH socket option.
    tcp_nopush on;
    # tcp_nodelay enables or disables the use of the TCP_NODELAY socket option.
    tcp_nodelay on;

    # keepalive_timeout sets the timeout during which a keep-alive client connection will stay open.
    keepalive_timeout 65;

    # gzip enables or disables gzip compression for responses.
    gzip on;
    # gzip_comp_level sets the compression level of gzip.
    gzip_comp_level 6;
    # gzip_min_length sets the minimum length of a response to be compressed.
    gzip_min_length 1000;
    # gzip_proxied enables or disables compression for proxied requests.
    gzip_proxied any;
    # gzip_types specifies the MIME types to compress.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # server block defines a virtual server.
    server {
        # listen specifies the port Nginx listens on.
        listen 80;
        # server_name specifies the domain names Nginx should respond to.
        server_name localhost;

        # location block defines how to handle requests for specific URIs.
        location / {
            # proxy_pass forwards requests to the Next.js application running in another container.
            # 'nextjs-app' is the service name defined in docker-compose.yml.
            proxy_pass http://serial-entry:5431;
            # proxy_http_version sets the HTTP protocol version for proxied requests.
            proxy_http_version 1.1;
            # proxy_set_header sets request headers for the proxied server.
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            # proxy_redirect disables or enables the processing of the "Location" and "Refresh" headers.
            proxy_redirect off;
        }

        # Optional: You might want to serve static assets directly from Nginx in a production setup.
        # For development with `npm run dev`, Next.js typically serves most static assets.
        # If you had a 'public' folder for static assets, you might configure it like this:
        # location /_next/static {
        #     alias /app/.next/static; # Path inside the Next.js container's volume
        #     expires 30d;
        #     access_log off;
        # }
    }
}